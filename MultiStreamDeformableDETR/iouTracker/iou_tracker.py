# ---------------------------------------------------------
# IOU Tracker
# Copyright (c) 2017 TU Berlin, Communication Systems Group
# Licensed under The MIT License [see LICENSE for details]
# Written by Erik Bochinski
# ---------------------------------------------------------
from time import time
import pdb

try:
    # this is for tracker
    from util import load_mot, iou
except:
    # this is for deform-detr
    from iouTracker.util import load_mot, iou

def track_iou_1by1(detections_frame, frame_num, tracks_active, tracks_finished,
                   sigma_h, sigma_l, sigma_iou, t_min, amount_pred=False):
    # apply low threshold to detections
    dets = [det for det in detections_frame if det['score'] >= sigma_l]

    updated_tracks = []
    for track in tracks_active:
        if len(dets) > 0:
            # get det with highest iou
            best_match = max(dets, key=lambda x: iou(track['bboxes'][-1], x['bbox']))
            if iou(track['bboxes'][-1], best_match['bbox']) >= sigma_iou:
                track['bboxes'].append(best_match['bbox'])
                track['max_score'] = max(track['max_score'], best_match['score'])
                if amount_pred:
                    track['amount_pred'].append(best_match['amount_pred'])
                    track['amount_pred_w'].append(best_match['amount_pred_w'])
                # start_frame, class, class_index is remained

                updated_tracks.append(track)

                # remove from best matching detection from detections
                del dets[dets.index(best_match)]

        # if track was not updated
        if len(updated_tracks) == 0 or track is not updated_tracks[-1]:
            # finish track when the conditions are met
            if track['max_score'] >= sigma_h and len(track['bboxes']) >= t_min:
                tracks_finished.append(track)

    # create new tracks
    if amount_pred:
        new_tracks = [{'bboxes': [det['bbox']],
                       'max_score': det['score'],
                       'start_frame': frame_num,
                       'amount_pred': [det['amount_pred']],
                       'amount_pred_w': [det['amount_pred_w']],
                       'class': det['class'],
                       'class_index': det['class_index'],
                       }
                      for det in dets]
    else:
        new_tracks = [{'bboxes': [det['bbox']], 'max_score': det['score'], 'start_frame': frame_num}
                      for det in dets]
    tracks_active = updated_tracks + new_tracks

    return tracks_active, tracks_finished


def track_iou_alternative(detections, sigma_l, sigma_h, sigma_iou, t_min):
    tracks_active = []
    tracks_finished = []

    # detections: list of detections_frame
    # detections_frame: list of det
    # det: dict of objects, score, bbox, class_name
    for frame_num, detections_frame in enumerate(detections, start=1):
        pdb.set_trace()
        tracks_active, tracks_finished = track_iou_1by1(detections_frame, frame_num, tracks_active, tracks_finished,
                       sigma_h, sigma_l, sigma_iou, t_min)

    # finish all remaining active tracks
    tracks_finished += [track for track in tracks_active
                        if track['max_score'] >= sigma_h and len(track['bboxes']) >= t_min]

    return tracks_finished

def track_iou(detections, sigma_l, sigma_h, sigma_iou, t_min):
    """
    Simple IOU based tracker.
    See "High-Speed Tracking-by-Detection Without Using Image Information by E. Bochinski, V. Eiselein, T. Sikora" for
    more information.

    Args:
         detections (list): list of detections per frame, usually generated by util.load_mot
         sigma_l (float): low detection threshold.
         sigma_h (float): high detection threshold.
         sigma_iou (float): IOU threshold.
         t_min (float): minimum track length in frames.

    Returns:
        list: list of tracks.
    """

    tracks_active = []
    tracks_finished = []

    # detections: list of detections_frame
    # detections_frame: list of det
    # det: dict of objects, score, bbox, class
    for frame_num, detections_frame in enumerate(detections, start=1):
        # apply low threshold to detections
        dets = [det for det in detections_frame if det['score'] >= sigma_l]

        updated_tracks = []
        for track in tracks_active:
            if len(dets) > 0:
                # get det with highest iou
                best_match = max(dets, key=lambda x: iou(track['bboxes'][-1], x['bbox']))
                if iou(track['bboxes'][-1], best_match['bbox']) >= sigma_iou:
                    track['bboxes'].append(best_match['bbox'])
                    track['max_score'] = max(track['max_score'], best_match['score'])

                    updated_tracks.append(track)

                    # remove from best matching detection from detections
                    del dets[dets.index(best_match)]

            # if track was not updated
            if len(updated_tracks) == 0 or track is not updated_tracks[-1]:
                # finish track when the conditions are met
                if track['max_score'] >= sigma_h and len(track['bboxes']) >= t_min:
                    tracks_finished.append(track)

        # create new tracks
        new_tracks = [{'bboxes': [det['bbox']], 'max_score': det['score'], 'start_frame': frame_num} for det in dets]
        tracks_active = updated_tracks + new_tracks

    # finish all remaining active tracks
    tracks_finished += [track for track in tracks_active
                        if track['max_score'] >= sigma_h and len(track['bboxes']) >= t_min]

    return tracks_finished


def track_iou_matlab_wrapper(detections, sigma_l, sigma_h, sigma_iou, t_min):
    """
    Matlab wrapper of the iou tracker for the detrac evaluation toolkit.

    Args:
         detections (numpy.array): numpy array of detections, usually supplied by run_tracker.m
         sigma_l (float): low detection threshold.
         sigma_h (float): high detection threshold.
         sigma_iou (float): IOU threshold.
         t_min (float): minimum track length in frames.

    Returns:
        float: speed in frames per second.
        list: list of tracks.
    """

    detections = detections.reshape((7, -1)).transpose()
    dets = load_mot(detections)
    start = time()
    tracks = track_iou(dets, sigma_l, sigma_h, sigma_iou, t_min)
    end = time()

    id_ = 1
    out = []
    for track in tracks:
        for i, bbox in enumerate(track['bboxes']):
            out += [float(bbox[0]), float(bbox[1]), float(bbox[2] - bbox[0]), float(bbox[3] - bbox[1]),
                    float(track['start_frame'] + i), float(id_)]
        id_ += 1

    num_frames = len(dets)
    speed = num_frames / (end - start)

    return speed, out
